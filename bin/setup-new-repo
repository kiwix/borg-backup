#!/bin/bash
#
# Author : Florent Kaisser <florent.pro@kaisser.name>
#
# ENV :
# - BORGBASE_NAME : name of backup
# - BORGBASE_KEY : Borgbase API key

function generate_ssh_key {
    COMMENT=backup@${BORGBASE_NAME}
    ssh-keygen -t ${SSH_KEY_TYPE} -a ${SSH_KDF} -N '' -C ${COMMENT} -f ${SSH_PRIV_KEY_FILE}
}

function save_keys {
    SSH_PUB_KEY=`cat ${SSH_PUB_KEY_FILE}`
    SSH_PRIV_KEY=`cat ${SSH_PRIV_KEY_FILE}`
    LOGIN_ENTRY='{"username":"'"${SSH_PUB_KEY}"'","password":"'"${SSH_PRIV_KEY}"'"}'
    ID_ITEM=$(bw get template item |\
      jq '.name = "'${BORGBASE_NAME}'"' |\
      jq ".login = ${LOGIN_ENTRY}" |\
      jq '.fields = [{"name": "BORGBASE_KEY", "value":"'"${BORGBASE_KEY}"'"}]'|\
    bw encode | bw create item | jq -r ".id")
    export ID_ITEM
}

function choose_collection {
    jcol=$(bw list org-collections --organizationid $id_org)
    ncol=$(echo $jcol | jq -r '.[] | .id' | wc -l)

    if [[ $ncol -eq 1 ]]; then
        export id_col=$(echo $jcol | jq -r '.[0] | .id')
        name_col=$(echo $jcol | jq -r '.[0] | .name')
        echo "Your organization ($name) only have a single Collection: $name_col, share with this Collection"
    elif [[ $ncol -gt 1 ]]; then
        echo "Your organization ($name) has $ncol collections:"
        i=0
        echo $jcol | jq -r '.[0] | .name +  " - " + .id' |\
        while IFS= read -r line;
        do
            i=$(( $i + 1 ))
            echo $i.  $line
        done
        echo -n "Enter it's number to share credential (default : 0): "
        read -r rep

        if [[ $rep -gt 0 ]] && [[ $rep -le $ncol ]] ; then
            i=$(( $rep - 1 ))
        else
            i=0
        fi

        export id_col=$(echo $jcol | jq -r '.['$i'] | .id')
        name_col=$(echo $jcol | jq -r '.['$i'] | .name')
        echo "OK, Shared with “$name_col”"
    else
        # an oraganization must have a collection, this not happen.
        echo "Fatal error : your organization ($name) have no collection, unable to continue"
        exit 4
    fi
}

function share_key {
    bw list organizations | jq -r '.[] |  .id + " " + .name' |\
        while IFS= read -r line;
        do
            export id_org=$(echo $line |  cut -d' ' -f1);
            export name=$(echo $line |  cut -d' ' -f2);
            echo -n "Do you want to share credentials with Organization “$name”? [y/N]"
            read -r rep < /dev/tty
            if [[ $rep == y* ]]; then
                echo "OK, Shared with “$name”"
                choose_collection
                echo "Sharing key ..."
                echo '["'$id_col'"]' | bw encode | bw share $ID_ITEM $id_org > /dev/null
                if [ $? ] ; then
                    # create a file, because var export don't work here ...
                    touch .key_shared
                    echo "Successful key sharing with $name!"
                fi
            fi
        done
    if [ -f .key_shared ] ; then 
        echo "The credentials is well shared with at least one organization"
    else
        echo -n "The credentials is shared with no organization, are you sure you want this? [y/N]"
        read -r rep
        if [[ $rep != y* ]] ; then share_key ; fi
    fi
 }

function main {
    bitwarden_login

    if bitwarden_get_ssh_pub_key
    then
        echo "Keys already exists with the name ${BORGBASE_NAME} in your Bitwarden account. If you want to use this tool with an existing repo, configure bitwarden manually."
        exit 3
    fi

    echo "Generate SSH key ..."
    generate_ssh_key

    echo "Save key to BitWarden"
    save_keys

    share_key

    bitwarden_logout

    create_ssh_config_file

    if [[ -z $BORGBASE_KEY ]]
    then
        echo -n "Your Borgbase API token (see https://www.borgbase.com/account?tab=2): "
        read -r BORGBASE_KEY
        export BORGBASE_KEY
    fi

    if ! init_borgbase_repository.py
    then
        exit 2
    fi
}

function usage {
    echo "Usage : $(basename $0) --name <repo-name> [--bitwarden <email>] [--alert-days <nb days>] [--quota <quota>] [--region <region>]" &&\
    echo -e "\t<repo-name>\tName of the backup repository to create" &&\
    echo -e "\t<email> \tBitwarden email" &&\
    echo -e "\t<nb days>\tPeriodicity of Borgbase alert in day(s) (default : 1)" &&\
    echo -e "\t<quota>\t\tQuota in Mo (no quota by default)" &&\
    echo -e "\t<region>\tServer region (eu or us) (default : eu)"
}

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -n|--name)
    export BORGBASE_NAME="$2"
    shift # past argument
    shift # past value
    ;;
    -b|--bitwarden)
    export BITWARDEN_EMAIL="$2"
    shift
    shift
    ;;
    -a|--alert-days)
    export ALERT="$2"
    shift
    shift
    ;;
    -q|--quota)
    export QUOTA=$2
    shift
    shift
    ;;
    -r|--region)
    export REGION=$2
    shift
    shift
    ;;
    *)    # unknown option
    usage
    exit 
    ;;
esac
done

if ! { [ "$REGION" = "eu" ] || [ "$REGION" = "us" ]; }
then
    echo "The region must be eu or us"
    usage
    exit 1
fi

if [[ -z $BORGBASE_NAME ]]
then
    echo "Please give a correct repository name"
    usage
    exit 1
fi

source ssh_config

main
